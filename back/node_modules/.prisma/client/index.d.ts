
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = {
  id: number
  email: string
  hash: string
  username: string
  access_token: string
  twoFactorSecret: boolean | null
  twofa_secret: string | null
  avatar: string | null
  displayName: string
  status: string | null
  wins: number
  losses: number
  ladderLevel: number
  achievements: string[]
}

/**
 * Model Friendship
 * 
 */
export type Friendship = {
  id: number
  status: string
  user1Id: number
  user2Id: number
}

/**
 * Model Match
 * 
 */
export type Match = {
  id: number
  date: Date
  gameType: string
  winnerId: number
  loserId: number
  result: string | null
}

/**
 * Model Channels
 * 
 */
export type Channels = {
  id: number
  name: string
  isPublic: boolean
  password: string | null
  ownerId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.friendship`: Exposes CRUD operations for the **Friendship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friendships
    * const friendships = await prisma.friendship.findMany()
    * ```
    */
  get friendship(): Prisma.FriendshipDelegate<GlobalReject>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<GlobalReject>;

  /**
   * `prisma.channels`: Exposes CRUD operations for the **Channels** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channels.findMany()
    * ```
    */
  get channels(): Prisma.ChannelsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Friendship: 'Friendship',
    Match: 'Match',
    Channels: 'Channels'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    friends: number
    friendOf: number
    matches: number
    matchesAsPlayer2: number
    channelsOwned: number
    channelsAdmin: number
    channelsMember: number
  }

  export type UsersCountOutputTypeSelect = {
    friends?: boolean
    friendOf?: boolean
    matches?: boolean
    matchesAsPlayer2?: boolean
    channelsOwned?: boolean
    channelsAdmin?: boolean
    channelsMember?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type ChannelsCountOutputType
   */


  export type ChannelsCountOutputType = {
    admins: number
    members: number
  }

  export type ChannelsCountOutputTypeSelect = {
    admins?: boolean
    members?: boolean
  }

  export type ChannelsCountOutputTypeGetPayload<S extends boolean | null | undefined | ChannelsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChannelsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ChannelsCountOutputTypeArgs)
    ? ChannelsCountOutputType 
    : S extends { select: any } & (ChannelsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ChannelsCountOutputType ? ChannelsCountOutputType[P] : never
  } 
      : ChannelsCountOutputType




  // Custom InputTypes

  /**
   * ChannelsCountOutputType without action
   */
  export type ChannelsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChannelsCountOutputType
     */
    select?: ChannelsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    wins: number | null
    losses: number | null
    ladderLevel: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    wins: number | null
    losses: number | null
    ladderLevel: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    hash: string | null
    username: string | null
    access_token: string | null
    twoFactorSecret: boolean | null
    twofa_secret: string | null
    avatar: string | null
    displayName: string | null
    status: string | null
    wins: number | null
    losses: number | null
    ladderLevel: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    hash: string | null
    username: string | null
    access_token: string | null
    twoFactorSecret: boolean | null
    twofa_secret: string | null
    avatar: string | null
    displayName: string | null
    status: string | null
    wins: number | null
    losses: number | null
    ladderLevel: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    hash: number
    username: number
    access_token: number
    twoFactorSecret: number
    twofa_secret: number
    avatar: number
    displayName: number
    status: number
    wins: number
    losses: number
    ladderLevel: number
    achievements: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    wins?: true
    losses?: true
    ladderLevel?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    wins?: true
    losses?: true
    ladderLevel?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    hash?: true
    username?: true
    access_token?: true
    twoFactorSecret?: true
    twofa_secret?: true
    avatar?: true
    displayName?: true
    status?: true
    wins?: true
    losses?: true
    ladderLevel?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    hash?: true
    username?: true
    access_token?: true
    twoFactorSecret?: true
    twofa_secret?: true
    avatar?: true
    displayName?: true
    status?: true
    wins?: true
    losses?: true
    ladderLevel?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    hash?: true
    username?: true
    access_token?: true
    twoFactorSecret?: true
    twofa_secret?: true
    avatar?: true
    displayName?: true
    status?: true
    wins?: true
    losses?: true
    ladderLevel?: true
    achievements?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: UsersScalarFieldEnum[]
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret: boolean | null
    twofa_secret: string | null
    avatar: string | null
    displayName: string
    status: string | null
    wins: number
    losses: number
    ladderLevel: number
    achievements: string[]
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect = {
    id?: boolean
    email?: boolean
    hash?: boolean
    username?: boolean
    access_token?: boolean
    twoFactorSecret?: boolean
    twofa_secret?: boolean
    avatar?: boolean
    displayName?: boolean
    status?: boolean
    wins?: boolean
    losses?: boolean
    ladderLevel?: boolean
    achievements?: boolean
    friends?: boolean | Users$friendsArgs
    friendOf?: boolean | Users$friendOfArgs
    matches?: boolean | Users$matchesArgs
    matchesAsPlayer2?: boolean | Users$matchesAsPlayer2Args
    channelsOwned?: boolean | Users$channelsOwnedArgs
    channelsAdmin?: boolean | Users$channelsAdminArgs
    channelsMember?: boolean | Users$channelsMemberArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type UsersInclude = {
    friends?: boolean | Users$friendsArgs
    friendOf?: boolean | Users$friendOfArgs
    matches?: boolean | Users$matchesArgs
    matchesAsPlayer2?: boolean | Users$matchesAsPlayer2Args
    channelsOwned?: boolean | Users$channelsOwnedArgs
    channelsAdmin?: boolean | Users$channelsAdminArgs
    channelsMember?: boolean | Users$channelsMemberArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type UsersGetPayload<S extends boolean | null | undefined | UsersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Users :
    S extends undefined ? never :
    S extends { include: any } & (UsersArgs | UsersFindManyArgs)
    ? Users  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'friends' ? Array < FriendshipGetPayload<S['include'][P]>>  :
        P extends 'friendOf' ? Array < FriendshipGetPayload<S['include'][P]>>  :
        P extends 'matches' ? Array < MatchGetPayload<S['include'][P]>>  :
        P extends 'matchesAsPlayer2' ? Array < MatchGetPayload<S['include'][P]>>  :
        P extends 'channelsOwned' ? Array < ChannelsGetPayload<S['include'][P]>>  :
        P extends 'channelsAdmin' ? Array < ChannelsGetPayload<S['include'][P]>>  :
        P extends 'channelsMember' ? Array < ChannelsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UsersArgs | UsersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'friends' ? Array < FriendshipGetPayload<S['select'][P]>>  :
        P extends 'friendOf' ? Array < FriendshipGetPayload<S['select'][P]>>  :
        P extends 'matches' ? Array < MatchGetPayload<S['select'][P]>>  :
        P extends 'matchesAsPlayer2' ? Array < MatchGetPayload<S['select'][P]>>  :
        P extends 'channelsOwned' ? Array < ChannelsGetPayload<S['select'][P]>>  :
        P extends 'channelsAdmin' ? Array < ChannelsGetPayload<S['select'][P]>>  :
        P extends 'channelsMember' ? Array < ChannelsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Users ? Users[P] : never
  } 
      : Users


  type UsersCountArgs = 
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? Prisma__UsersClient<UsersGetPayload<T>> : Prisma__UsersClient<UsersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? Prisma__UsersClient<UsersGetPayload<T>> : Prisma__UsersClient<UsersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): Prisma.PrismaPromise<Array<UsersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs>(
      args?: SelectSubset<T, UsersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    friends<T extends Users$friendsArgs= {}>(args?: Subset<T, Users$friendsArgs>): Prisma.PrismaPromise<Array<FriendshipGetPayload<T>>| Null>;

    friendOf<T extends Users$friendOfArgs= {}>(args?: Subset<T, Users$friendOfArgs>): Prisma.PrismaPromise<Array<FriendshipGetPayload<T>>| Null>;

    matches<T extends Users$matchesArgs= {}>(args?: Subset<T, Users$matchesArgs>): Prisma.PrismaPromise<Array<MatchGetPayload<T>>| Null>;

    matchesAsPlayer2<T extends Users$matchesAsPlayer2Args= {}>(args?: Subset<T, Users$matchesAsPlayer2Args>): Prisma.PrismaPromise<Array<MatchGetPayload<T>>| Null>;

    channelsOwned<T extends Users$channelsOwnedArgs= {}>(args?: Subset<T, Users$channelsOwnedArgs>): Prisma.PrismaPromise<Array<ChannelsGetPayload<T>>| Null>;

    channelsAdmin<T extends Users$channelsAdminArgs= {}>(args?: Subset<T, Users$channelsAdminArgs>): Prisma.PrismaPromise<Array<ChannelsGetPayload<T>>| Null>;

    channelsMember<T extends Users$channelsMemberArgs= {}>(args?: Subset<T, Users$channelsMemberArgs>): Prisma.PrismaPromise<Array<ChannelsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Users base type for findUnique actions
   */
  export type UsersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUnique
   */
  export interface UsersFindUniqueArgs extends UsersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users base type for findFirst actions
   */
  export type UsersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * Users findFirst
   */
  export interface UsersFindFirstArgs extends UsersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.friends
   */
  export type Users$friendsArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    where?: FriendshipWhereInput
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * Users.friendOf
   */
  export type Users$friendOfArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    where?: FriendshipWhereInput
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * Users.matches
   */
  export type Users$matchesArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    where?: MatchWhereInput
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Users.matchesAsPlayer2
   */
  export type Users$matchesAsPlayer2Args = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    where?: MatchWhereInput
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Users.channelsOwned
   */
  export type Users$channelsOwnedArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    where?: ChannelsWhereInput
    orderBy?: Enumerable<ChannelsOrderByWithRelationInput>
    cursor?: ChannelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * Users.channelsAdmin
   */
  export type Users$channelsAdminArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    where?: ChannelsWhereInput
    orderBy?: Enumerable<ChannelsOrderByWithRelationInput>
    cursor?: ChannelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * Users.channelsMember
   */
  export type Users$channelsMemberArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    where?: ChannelsWhereInput
    orderBy?: Enumerable<ChannelsOrderByWithRelationInput>
    cursor?: ChannelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
  }



  /**
   * Model Friendship
   */


  export type AggregateFriendship = {
    _count: FriendshipCountAggregateOutputType | null
    _avg: FriendshipAvgAggregateOutputType | null
    _sum: FriendshipSumAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  export type FriendshipAvgAggregateOutputType = {
    id: number | null
    user1Id: number | null
    user2Id: number | null
  }

  export type FriendshipSumAggregateOutputType = {
    id: number | null
    user1Id: number | null
    user2Id: number | null
  }

  export type FriendshipMinAggregateOutputType = {
    id: number | null
    status: string | null
    user1Id: number | null
    user2Id: number | null
  }

  export type FriendshipMaxAggregateOutputType = {
    id: number | null
    status: string | null
    user1Id: number | null
    user2Id: number | null
  }

  export type FriendshipCountAggregateOutputType = {
    id: number
    status: number
    user1Id: number
    user2Id: number
    _all: number
  }


  export type FriendshipAvgAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
  }

  export type FriendshipSumAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
  }

  export type FriendshipMinAggregateInputType = {
    id?: true
    status?: true
    user1Id?: true
    user2Id?: true
  }

  export type FriendshipMaxAggregateInputType = {
    id?: true
    status?: true
    user1Id?: true
    user2Id?: true
  }

  export type FriendshipCountAggregateInputType = {
    id?: true
    status?: true
    user1Id?: true
    user2Id?: true
    _all?: true
  }

  export type FriendshipAggregateArgs = {
    /**
     * Filter which Friendship to aggregate.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friendships
    **/
    _count?: true | FriendshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FriendshipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FriendshipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipMaxAggregateInputType
  }

  export type GetFriendshipAggregateType<T extends FriendshipAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendship[P]>
      : GetScalarType<T[P], AggregateFriendship[P]>
  }




  export type FriendshipGroupByArgs = {
    where?: FriendshipWhereInput
    orderBy?: Enumerable<FriendshipOrderByWithAggregationInput>
    by: FriendshipScalarFieldEnum[]
    having?: FriendshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipCountAggregateInputType | true
    _avg?: FriendshipAvgAggregateInputType
    _sum?: FriendshipSumAggregateInputType
    _min?: FriendshipMinAggregateInputType
    _max?: FriendshipMaxAggregateInputType
  }


  export type FriendshipGroupByOutputType = {
    id: number
    status: string
    user1Id: number
    user2Id: number
    _count: FriendshipCountAggregateOutputType | null
    _avg: FriendshipAvgAggregateOutputType | null
    _sum: FriendshipSumAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  type GetFriendshipGroupByPayload<T extends FriendshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FriendshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
        }
      >
    >


  export type FriendshipSelect = {
    id?: boolean
    status?: boolean
    user1Id?: boolean
    user2Id?: boolean
    user1?: boolean | UsersArgs
    user2?: boolean | UsersArgs
  }


  export type FriendshipInclude = {
    user1?: boolean | UsersArgs
    user2?: boolean | UsersArgs
  }

  export type FriendshipGetPayload<S extends boolean | null | undefined | FriendshipArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Friendship :
    S extends undefined ? never :
    S extends { include: any } & (FriendshipArgs | FriendshipFindManyArgs)
    ? Friendship  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user1' ? UsersGetPayload<S['include'][P]> :
        P extends 'user2' ? UsersGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FriendshipArgs | FriendshipFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user1' ? UsersGetPayload<S['select'][P]> :
        P extends 'user2' ? UsersGetPayload<S['select'][P]> :  P extends keyof Friendship ? Friendship[P] : never
  } 
      : Friendship


  type FriendshipCountArgs = 
    Omit<FriendshipFindManyArgs, 'select' | 'include'> & {
      select?: FriendshipCountAggregateInputType | true
    }

  export interface FriendshipDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Friendship that matches the filter.
     * @param {FriendshipFindUniqueArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FriendshipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FriendshipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Friendship'> extends True ? Prisma__FriendshipClient<FriendshipGetPayload<T>> : Prisma__FriendshipClient<FriendshipGetPayload<T> | null, null>

    /**
     * Find one Friendship that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FriendshipFindUniqueOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FriendshipFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FriendshipFindUniqueOrThrowArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Find the first Friendship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FriendshipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FriendshipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Friendship'> extends True ? Prisma__FriendshipClient<FriendshipGetPayload<T>> : Prisma__FriendshipClient<FriendshipGetPayload<T> | null, null>

    /**
     * Find the first Friendship that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FriendshipFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FriendshipFindFirstOrThrowArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Find zero or more Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friendships
     * const friendships = await prisma.friendship.findMany()
     * 
     * // Get first 10 Friendships
     * const friendships = await prisma.friendship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendshipWithIdOnly = await prisma.friendship.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FriendshipFindManyArgs>(
      args?: SelectSubset<T, FriendshipFindManyArgs>
    ): Prisma.PrismaPromise<Array<FriendshipGetPayload<T>>>

    /**
     * Create a Friendship.
     * @param {FriendshipCreateArgs} args - Arguments to create a Friendship.
     * @example
     * // Create one Friendship
     * const Friendship = await prisma.friendship.create({
     *   data: {
     *     // ... data to create a Friendship
     *   }
     * })
     * 
    **/
    create<T extends FriendshipCreateArgs>(
      args: SelectSubset<T, FriendshipCreateArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Create many Friendships.
     *     @param {FriendshipCreateManyArgs} args - Arguments to create many Friendships.
     *     @example
     *     // Create many Friendships
     *     const friendship = await prisma.friendship.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FriendshipCreateManyArgs>(
      args?: SelectSubset<T, FriendshipCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Friendship.
     * @param {FriendshipDeleteArgs} args - Arguments to delete one Friendship.
     * @example
     * // Delete one Friendship
     * const Friendship = await prisma.friendship.delete({
     *   where: {
     *     // ... filter to delete one Friendship
     *   }
     * })
     * 
    **/
    delete<T extends FriendshipDeleteArgs>(
      args: SelectSubset<T, FriendshipDeleteArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Update one Friendship.
     * @param {FriendshipUpdateArgs} args - Arguments to update one Friendship.
     * @example
     * // Update one Friendship
     * const friendship = await prisma.friendship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FriendshipUpdateArgs>(
      args: SelectSubset<T, FriendshipUpdateArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Delete zero or more Friendships.
     * @param {FriendshipDeleteManyArgs} args - Arguments to filter Friendships to delete.
     * @example
     * // Delete a few Friendships
     * const { count } = await prisma.friendship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FriendshipDeleteManyArgs>(
      args?: SelectSubset<T, FriendshipDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FriendshipUpdateManyArgs>(
      args: SelectSubset<T, FriendshipUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Friendship.
     * @param {FriendshipUpsertArgs} args - Arguments to update or create a Friendship.
     * @example
     * // Update or create a Friendship
     * const friendship = await prisma.friendship.upsert({
     *   create: {
     *     // ... data to create a Friendship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friendship we want to update
     *   }
     * })
    **/
    upsert<T extends FriendshipUpsertArgs>(
      args: SelectSubset<T, FriendshipUpsertArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Count the number of Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipCountArgs} args - Arguments to filter Friendships to count.
     * @example
     * // Count the number of Friendships
     * const count = await prisma.friendship.count({
     *   where: {
     *     // ... the filter for the Friendships we want to count
     *   }
     * })
    **/
    count<T extends FriendshipCountArgs>(
      args?: Subset<T, FriendshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipAggregateArgs>(args: Subset<T, FriendshipAggregateArgs>): Prisma.PrismaPromise<GetFriendshipAggregateType<T>>

    /**
     * Group by Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendshipGroupByArgs['orderBy'] }
        : { orderBy?: FriendshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Friendship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FriendshipClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user1<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    user2<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Friendship base type for findUnique actions
   */
  export type FriendshipFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship findUnique
   */
  export interface FriendshipFindUniqueArgs extends FriendshipFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Friendship findUniqueOrThrow
   */
  export type FriendshipFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship base type for findFirst actions
   */
  export type FriendshipFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }

  /**
   * Friendship findFirst
   */
  export interface FriendshipFindFirstArgs extends FriendshipFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Friendship findFirstOrThrow
   */
  export type FriendshipFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * Friendship findMany
   */
  export type FriendshipFindManyArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendships to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * Friendship create
   */
  export type FriendshipCreateArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * The data needed to create a Friendship.
     */
    data: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
  }


  /**
   * Friendship createMany
   */
  export type FriendshipCreateManyArgs = {
    /**
     * The data used to create many Friendships.
     */
    data: Enumerable<FriendshipCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Friendship update
   */
  export type FriendshipUpdateArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * The data needed to update a Friendship.
     */
    data: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
    /**
     * Choose, which Friendship to update.
     */
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship updateMany
   */
  export type FriendshipUpdateManyArgs = {
    /**
     * The data used to update Friendships.
     */
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     */
    where?: FriendshipWhereInput
  }


  /**
   * Friendship upsert
   */
  export type FriendshipUpsertArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * The filter to search for the Friendship to update in case it exists.
     */
    where: FriendshipWhereUniqueInput
    /**
     * In case the Friendship found by the `where` argument doesn't exist, create a new Friendship with this data.
     */
    create: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
    /**
     * In case the Friendship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
  }


  /**
   * Friendship delete
   */
  export type FriendshipDeleteArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter which Friendship to delete.
     */
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship deleteMany
   */
  export type FriendshipDeleteManyArgs = {
    /**
     * Filter which Friendships to delete
     */
    where?: FriendshipWhereInput
  }


  /**
   * Friendship without action
   */
  export type FriendshipArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
  }



  /**
   * Model Match
   */


  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    id: number | null
    winnerId: number | null
    loserId: number | null
  }

  export type MatchSumAggregateOutputType = {
    id: number | null
    winnerId: number | null
    loserId: number | null
  }

  export type MatchMinAggregateOutputType = {
    id: number | null
    date: Date | null
    gameType: string | null
    winnerId: number | null
    loserId: number | null
    result: string | null
  }

  export type MatchMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    gameType: string | null
    winnerId: number | null
    loserId: number | null
    result: string | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    date: number
    gameType: number
    winnerId: number
    loserId: number
    result: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    id?: true
    winnerId?: true
    loserId?: true
  }

  export type MatchSumAggregateInputType = {
    id?: true
    winnerId?: true
    loserId?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
    date?: true
    gameType?: true
    winnerId?: true
    loserId?: true
    result?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    date?: true
    gameType?: true
    winnerId?: true
    loserId?: true
    result?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    date?: true
    gameType?: true
    winnerId?: true
    loserId?: true
    result?: true
    _all?: true
  }

  export type MatchAggregateArgs = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs = {
    where?: MatchWhereInput
    orderBy?: Enumerable<MatchOrderByWithAggregationInput>
    by: MatchScalarFieldEnum[]
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }


  export type MatchGroupByOutputType = {
    id: number
    date: Date
    gameType: string
    winnerId: number
    loserId: number
    result: string | null
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect = {
    id?: boolean
    date?: boolean
    gameType?: boolean
    winnerId?: boolean
    loserId?: boolean
    result?: boolean
    player1?: boolean | UsersArgs
    player2?: boolean | UsersArgs
  }


  export type MatchInclude = {
    player1?: boolean | UsersArgs
    player2?: boolean | UsersArgs
  }

  export type MatchGetPayload<S extends boolean | null | undefined | MatchArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Match :
    S extends undefined ? never :
    S extends { include: any } & (MatchArgs | MatchFindManyArgs)
    ? Match  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'player1' ? UsersGetPayload<S['include'][P]> :
        P extends 'player2' ? UsersGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MatchArgs | MatchFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'player1' ? UsersGetPayload<S['select'][P]> :
        P extends 'player2' ? UsersGetPayload<S['select'][P]> :  P extends keyof Match ? Match[P] : never
  } 
      : Match


  type MatchCountArgs = 
    Omit<MatchFindManyArgs, 'select' | 'include'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MatchFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MatchFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Match'> extends True ? Prisma__MatchClient<MatchGetPayload<T>> : Prisma__MatchClient<MatchGetPayload<T> | null, null>

    /**
     * Find one Match that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MatchFindUniqueOrThrowArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MatchFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MatchFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Match'> extends True ? Prisma__MatchClient<MatchGetPayload<T>> : Prisma__MatchClient<MatchGetPayload<T> | null, null>

    /**
     * Find the first Match that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MatchFindFirstOrThrowArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MatchFindManyArgs>(
      args?: SelectSubset<T, MatchFindManyArgs>
    ): Prisma.PrismaPromise<Array<MatchGetPayload<T>>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
    **/
    create<T extends MatchCreateArgs>(
      args: SelectSubset<T, MatchCreateArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Create many Matches.
     *     @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     *     @example
     *     // Create many Matches
     *     const match = await prisma.match.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MatchCreateManyArgs>(
      args?: SelectSubset<T, MatchCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
    **/
    delete<T extends MatchDeleteArgs>(
      args: SelectSubset<T, MatchDeleteArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MatchUpdateArgs>(
      args: SelectSubset<T, MatchUpdateArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MatchDeleteManyArgs>(
      args?: SelectSubset<T, MatchDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MatchUpdateManyArgs>(
      args: SelectSubset<T, MatchUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
    **/
    upsert<T extends MatchUpsertArgs>(
      args: SelectSubset<T, MatchUpsertArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MatchClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    player1<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    player2<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Match base type for findUnique actions
   */
  export type MatchFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUnique
   */
  export interface MatchFindUniqueArgs extends MatchFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match base type for findFirst actions
   */
  export type MatchFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: Enumerable<MatchScalarFieldEnum>
  }

  /**
   * Match findFirst
   */
  export interface MatchFindFirstArgs extends MatchFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Match findMany
   */
  export type MatchFindManyArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Match create
   */
  export type MatchCreateArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }


  /**
   * Match createMany
   */
  export type MatchCreateManyArgs = {
    /**
     * The data used to create many Matches.
     */
    data: Enumerable<MatchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Match update
   */
  export type MatchUpdateArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
  }


  /**
   * Match upsert
   */
  export type MatchUpsertArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }


  /**
   * Match delete
   */
  export type MatchDeleteArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
  }


  /**
   * Match without action
   */
  export type MatchArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
  }



  /**
   * Model Channels
   */


  export type AggregateChannels = {
    _count: ChannelsCountAggregateOutputType | null
    _avg: ChannelsAvgAggregateOutputType | null
    _sum: ChannelsSumAggregateOutputType | null
    _min: ChannelsMinAggregateOutputType | null
    _max: ChannelsMaxAggregateOutputType | null
  }

  export type ChannelsAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type ChannelsSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type ChannelsMinAggregateOutputType = {
    id: number | null
    name: string | null
    isPublic: boolean | null
    password: string | null
    ownerId: number | null
  }

  export type ChannelsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    isPublic: boolean | null
    password: string | null
    ownerId: number | null
  }

  export type ChannelsCountAggregateOutputType = {
    id: number
    name: number
    isPublic: number
    password: number
    ownerId: number
    _all: number
  }


  export type ChannelsAvgAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type ChannelsSumAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type ChannelsMinAggregateInputType = {
    id?: true
    name?: true
    isPublic?: true
    password?: true
    ownerId?: true
  }

  export type ChannelsMaxAggregateInputType = {
    id?: true
    name?: true
    isPublic?: true
    password?: true
    ownerId?: true
  }

  export type ChannelsCountAggregateInputType = {
    id?: true
    name?: true
    isPublic?: true
    password?: true
    ownerId?: true
    _all?: true
  }

  export type ChannelsAggregateArgs = {
    /**
     * Filter which Channels to aggregate.
     */
    where?: ChannelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Channels
    **/
    _count?: true | ChannelsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelsMaxAggregateInputType
  }

  export type GetChannelsAggregateType<T extends ChannelsAggregateArgs> = {
        [P in keyof T & keyof AggregateChannels]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannels[P]>
      : GetScalarType<T[P], AggregateChannels[P]>
  }




  export type ChannelsGroupByArgs = {
    where?: ChannelsWhereInput
    orderBy?: Enumerable<ChannelsOrderByWithAggregationInput>
    by: ChannelsScalarFieldEnum[]
    having?: ChannelsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelsCountAggregateInputType | true
    _avg?: ChannelsAvgAggregateInputType
    _sum?: ChannelsSumAggregateInputType
    _min?: ChannelsMinAggregateInputType
    _max?: ChannelsMaxAggregateInputType
  }


  export type ChannelsGroupByOutputType = {
    id: number
    name: string
    isPublic: boolean
    password: string | null
    ownerId: number
    _count: ChannelsCountAggregateOutputType | null
    _avg: ChannelsAvgAggregateOutputType | null
    _sum: ChannelsSumAggregateOutputType | null
    _min: ChannelsMinAggregateOutputType | null
    _max: ChannelsMaxAggregateOutputType | null
  }

  type GetChannelsGroupByPayload<T extends ChannelsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChannelsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelsGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelsGroupByOutputType[P]>
        }
      >
    >


  export type ChannelsSelect = {
    id?: boolean
    name?: boolean
    isPublic?: boolean
    password?: boolean
    ownerId?: boolean
    owner?: boolean | UsersArgs
    admins?: boolean | Channels$adminsArgs
    members?: boolean | Channels$membersArgs
    _count?: boolean | ChannelsCountOutputTypeArgs
  }


  export type ChannelsInclude = {
    owner?: boolean | UsersArgs
    admins?: boolean | Channels$adminsArgs
    members?: boolean | Channels$membersArgs
    _count?: boolean | ChannelsCountOutputTypeArgs
  }

  export type ChannelsGetPayload<S extends boolean | null | undefined | ChannelsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Channels :
    S extends undefined ? never :
    S extends { include: any } & (ChannelsArgs | ChannelsFindManyArgs)
    ? Channels  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'owner' ? UsersGetPayload<S['include'][P]> :
        P extends 'admins' ? Array < UsersGetPayload<S['include'][P]>>  :
        P extends 'members' ? Array < UsersGetPayload<S['include'][P]>>  :
        P extends '_count' ? ChannelsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChannelsArgs | ChannelsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'owner' ? UsersGetPayload<S['select'][P]> :
        P extends 'admins' ? Array < UsersGetPayload<S['select'][P]>>  :
        P extends 'members' ? Array < UsersGetPayload<S['select'][P]>>  :
        P extends '_count' ? ChannelsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Channels ? Channels[P] : never
  } 
      : Channels


  type ChannelsCountArgs = 
    Omit<ChannelsFindManyArgs, 'select' | 'include'> & {
      select?: ChannelsCountAggregateInputType | true
    }

  export interface ChannelsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Channels that matches the filter.
     * @param {ChannelsFindUniqueArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChannelsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Channels'> extends True ? Prisma__ChannelsClient<ChannelsGetPayload<T>> : Prisma__ChannelsClient<ChannelsGetPayload<T> | null, null>

    /**
     * Find one Channels that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelsFindUniqueOrThrowArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChannelsFindUniqueOrThrowArgs>
    ): Prisma__ChannelsClient<ChannelsGetPayload<T>>

    /**
     * Find the first Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsFindFirstArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChannelsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Channels'> extends True ? Prisma__ChannelsClient<ChannelsGetPayload<T>> : Prisma__ChannelsClient<ChannelsGetPayload<T> | null, null>

    /**
     * Find the first Channels that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsFindFirstOrThrowArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChannelsFindFirstOrThrowArgs>
    ): Prisma__ChannelsClient<ChannelsGetPayload<T>>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channels.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channels.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelsWithIdOnly = await prisma.channels.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelsFindManyArgs>(
      args?: SelectSubset<T, ChannelsFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChannelsGetPayload<T>>>

    /**
     * Create a Channels.
     * @param {ChannelsCreateArgs} args - Arguments to create a Channels.
     * @example
     * // Create one Channels
     * const Channels = await prisma.channels.create({
     *   data: {
     *     // ... data to create a Channels
     *   }
     * })
     * 
    **/
    create<T extends ChannelsCreateArgs>(
      args: SelectSubset<T, ChannelsCreateArgs>
    ): Prisma__ChannelsClient<ChannelsGetPayload<T>>

    /**
     * Create many Channels.
     *     @param {ChannelsCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channels = await prisma.channels.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelsCreateManyArgs>(
      args?: SelectSubset<T, ChannelsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channels.
     * @param {ChannelsDeleteArgs} args - Arguments to delete one Channels.
     * @example
     * // Delete one Channels
     * const Channels = await prisma.channels.delete({
     *   where: {
     *     // ... filter to delete one Channels
     *   }
     * })
     * 
    **/
    delete<T extends ChannelsDeleteArgs>(
      args: SelectSubset<T, ChannelsDeleteArgs>
    ): Prisma__ChannelsClient<ChannelsGetPayload<T>>

    /**
     * Update one Channels.
     * @param {ChannelsUpdateArgs} args - Arguments to update one Channels.
     * @example
     * // Update one Channels
     * const channels = await prisma.channels.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelsUpdateArgs>(
      args: SelectSubset<T, ChannelsUpdateArgs>
    ): Prisma__ChannelsClient<ChannelsGetPayload<T>>

    /**
     * Delete zero or more Channels.
     * @param {ChannelsDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channels.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelsDeleteManyArgs>(
      args?: SelectSubset<T, ChannelsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channels = await prisma.channels.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelsUpdateManyArgs>(
      args: SelectSubset<T, ChannelsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channels.
     * @param {ChannelsUpsertArgs} args - Arguments to update or create a Channels.
     * @example
     * // Update or create a Channels
     * const channels = await prisma.channels.upsert({
     *   create: {
     *     // ... data to create a Channels
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channels we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelsUpsertArgs>(
      args: SelectSubset<T, ChannelsUpsertArgs>
    ): Prisma__ChannelsClient<ChannelsGetPayload<T>>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channels.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends ChannelsCountArgs>(
      args?: Subset<T, ChannelsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelsAggregateArgs>(args: Subset<T, ChannelsAggregateArgs>): Prisma.PrismaPromise<GetChannelsAggregateType<T>>

    /**
     * Group by Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelsGroupByArgs['orderBy'] }
        : { orderBy?: ChannelsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Channels.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChannelsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    owner<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    admins<T extends Channels$adminsArgs= {}>(args?: Subset<T, Channels$adminsArgs>): Prisma.PrismaPromise<Array<UsersGetPayload<T>>| Null>;

    members<T extends Channels$membersArgs= {}>(args?: Subset<T, Channels$membersArgs>): Prisma.PrismaPromise<Array<UsersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Channels base type for findUnique actions
   */
  export type ChannelsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    /**
     * Filter, which Channels to fetch.
     */
    where: ChannelsWhereUniqueInput
  }

  /**
   * Channels findUnique
   */
  export interface ChannelsFindUniqueArgs extends ChannelsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Channels findUniqueOrThrow
   */
  export type ChannelsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    /**
     * Filter, which Channels to fetch.
     */
    where: ChannelsWhereUniqueInput
  }


  /**
   * Channels base type for findFirst actions
   */
  export type ChannelsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }

  /**
   * Channels findFirst
   */
  export interface ChannelsFindFirstArgs extends ChannelsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Channels findFirstOrThrow
   */
  export type ChannelsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * Channels findMany
   */
  export type ChannelsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Channels.
     */
    cursor?: ChannelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * Channels create
   */
  export type ChannelsCreateArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    /**
     * The data needed to create a Channels.
     */
    data: XOR<ChannelsCreateInput, ChannelsUncheckedCreateInput>
  }


  /**
   * Channels createMany
   */
  export type ChannelsCreateManyArgs = {
    /**
     * The data used to create many Channels.
     */
    data: Enumerable<ChannelsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Channels update
   */
  export type ChannelsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    /**
     * The data needed to update a Channels.
     */
    data: XOR<ChannelsUpdateInput, ChannelsUncheckedUpdateInput>
    /**
     * Choose, which Channels to update.
     */
    where: ChannelsWhereUniqueInput
  }


  /**
   * Channels updateMany
   */
  export type ChannelsUpdateManyArgs = {
    /**
     * The data used to update Channels.
     */
    data: XOR<ChannelsUpdateManyMutationInput, ChannelsUncheckedUpdateManyInput>
    /**
     * Filter which Channels to update
     */
    where?: ChannelsWhereInput
  }


  /**
   * Channels upsert
   */
  export type ChannelsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    /**
     * The filter to search for the Channels to update in case it exists.
     */
    where: ChannelsWhereUniqueInput
    /**
     * In case the Channels found by the `where` argument doesn't exist, create a new Channels with this data.
     */
    create: XOR<ChannelsCreateInput, ChannelsUncheckedCreateInput>
    /**
     * In case the Channels was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelsUpdateInput, ChannelsUncheckedUpdateInput>
  }


  /**
   * Channels delete
   */
  export type ChannelsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
    /**
     * Filter which Channels to delete.
     */
    where: ChannelsWhereUniqueInput
  }


  /**
   * Channels deleteMany
   */
  export type ChannelsDeleteManyArgs = {
    /**
     * Filter which Channels to delete
     */
    where?: ChannelsWhereInput
  }


  /**
   * Channels.admins
   */
  export type Channels$adminsArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Channels.members
   */
  export type Channels$membersArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude | null
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Channels without action
   */
  export type ChannelsArgs = {
    /**
     * Select specific fields to fetch from the Channels
     */
    select?: ChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ChannelsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isPublic: 'isPublic',
    password: 'password',
    ownerId: 'ownerId'
  };

  export type ChannelsScalarFieldEnum = (typeof ChannelsScalarFieldEnum)[keyof typeof ChannelsScalarFieldEnum]


  export const FriendshipScalarFieldEnum: {
    id: 'id',
    status: 'status',
    user1Id: 'user1Id',
    user2Id: 'user2Id'
  };

  export type FriendshipScalarFieldEnum = (typeof FriendshipScalarFieldEnum)[keyof typeof FriendshipScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    date: 'date',
    gameType: 'gameType',
    winnerId: 'winnerId',
    loserId: 'loserId',
    result: 'result'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    hash: 'hash',
    username: 'username',
    access_token: 'access_token',
    twoFactorSecret: 'twoFactorSecret',
    twofa_secret: 'twofa_secret',
    avatar: 'avatar',
    displayName: 'displayName',
    status: 'status',
    wins: 'wins',
    losses: 'losses',
    ladderLevel: 'ladderLevel',
    achievements: 'achievements'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    hash?: StringFilter | string
    username?: StringFilter | string
    access_token?: StringFilter | string
    twoFactorSecret?: BoolNullableFilter | boolean | null
    twofa_secret?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    displayName?: StringFilter | string
    status?: StringNullableFilter | string | null
    wins?: IntFilter | number
    losses?: IntFilter | number
    ladderLevel?: IntFilter | number
    achievements?: StringNullableListFilter
    friends?: FriendshipListRelationFilter
    friendOf?: FriendshipListRelationFilter
    matches?: MatchListRelationFilter
    matchesAsPlayer2?: MatchListRelationFilter
    channelsOwned?: ChannelsListRelationFilter
    channelsAdmin?: ChannelsListRelationFilter
    channelsMember?: ChannelsListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    hash?: SortOrder
    username?: SortOrder
    access_token?: SortOrder
    twoFactorSecret?: SortOrder
    twofa_secret?: SortOrder
    avatar?: SortOrder
    displayName?: SortOrder
    status?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladderLevel?: SortOrder
    achievements?: SortOrder
    friends?: FriendshipOrderByRelationAggregateInput
    friendOf?: FriendshipOrderByRelationAggregateInput
    matches?: MatchOrderByRelationAggregateInput
    matchesAsPlayer2?: MatchOrderByRelationAggregateInput
    channelsOwned?: ChannelsOrderByRelationAggregateInput
    channelsAdmin?: ChannelsOrderByRelationAggregateInput
    channelsMember?: ChannelsOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = {
    id?: number
    email?: string
    username?: string
    access_token?: string
    displayName?: string
  }

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    hash?: SortOrder
    username?: SortOrder
    access_token?: SortOrder
    twoFactorSecret?: SortOrder
    twofa_secret?: SortOrder
    avatar?: SortOrder
    displayName?: SortOrder
    status?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladderLevel?: SortOrder
    achievements?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    hash?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    access_token?: StringWithAggregatesFilter | string
    twoFactorSecret?: BoolNullableWithAggregatesFilter | boolean | null
    twofa_secret?: StringNullableWithAggregatesFilter | string | null
    avatar?: StringNullableWithAggregatesFilter | string | null
    displayName?: StringWithAggregatesFilter | string
    status?: StringNullableWithAggregatesFilter | string | null
    wins?: IntWithAggregatesFilter | number
    losses?: IntWithAggregatesFilter | number
    ladderLevel?: IntWithAggregatesFilter | number
    achievements?: StringNullableListFilter
  }

  export type FriendshipWhereInput = {
    AND?: Enumerable<FriendshipWhereInput>
    OR?: Enumerable<FriendshipWhereInput>
    NOT?: Enumerable<FriendshipWhereInput>
    id?: IntFilter | number
    status?: StringFilter | string
    user1Id?: IntFilter | number
    user2Id?: IntFilter | number
    user1?: XOR<UsersRelationFilter, UsersWhereInput>
    user2?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type FriendshipOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    user1?: UsersOrderByWithRelationInput
    user2?: UsersOrderByWithRelationInput
  }

  export type FriendshipWhereUniqueInput = {
    id?: number
  }

  export type FriendshipOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    _count?: FriendshipCountOrderByAggregateInput
    _avg?: FriendshipAvgOrderByAggregateInput
    _max?: FriendshipMaxOrderByAggregateInput
    _min?: FriendshipMinOrderByAggregateInput
    _sum?: FriendshipSumOrderByAggregateInput
  }

  export type FriendshipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    OR?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    user1Id?: IntWithAggregatesFilter | number
    user2Id?: IntWithAggregatesFilter | number
  }

  export type MatchWhereInput = {
    AND?: Enumerable<MatchWhereInput>
    OR?: Enumerable<MatchWhereInput>
    NOT?: Enumerable<MatchWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    gameType?: StringFilter | string
    winnerId?: IntFilter | number
    loserId?: IntFilter | number
    result?: StringNullableFilter | string | null
    player1?: XOR<UsersRelationFilter, UsersWhereInput>
    player2?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    gameType?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    result?: SortOrder
    player1?: UsersOrderByWithRelationInput
    player2?: UsersOrderByWithRelationInput
  }

  export type MatchWhereUniqueInput = {
    id?: number
  }

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    gameType?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    result?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MatchScalarWhereWithAggregatesInput>
    OR?: Enumerable<MatchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MatchScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    gameType?: StringWithAggregatesFilter | string
    winnerId?: IntWithAggregatesFilter | number
    loserId?: IntWithAggregatesFilter | number
    result?: StringNullableWithAggregatesFilter | string | null
  }

  export type ChannelsWhereInput = {
    AND?: Enumerable<ChannelsWhereInput>
    OR?: Enumerable<ChannelsWhereInput>
    NOT?: Enumerable<ChannelsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    isPublic?: BoolFilter | boolean
    password?: StringNullableFilter | string | null
    ownerId?: IntFilter | number
    owner?: XOR<UsersRelationFilter, UsersWhereInput>
    admins?: UsersListRelationFilter
    members?: UsersListRelationFilter
  }

  export type ChannelsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isPublic?: SortOrder
    password?: SortOrder
    ownerId?: SortOrder
    owner?: UsersOrderByWithRelationInput
    admins?: UsersOrderByRelationAggregateInput
    members?: UsersOrderByRelationAggregateInput
  }

  export type ChannelsWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type ChannelsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isPublic?: SortOrder
    password?: SortOrder
    ownerId?: SortOrder
    _count?: ChannelsCountOrderByAggregateInput
    _avg?: ChannelsAvgOrderByAggregateInput
    _max?: ChannelsMaxOrderByAggregateInput
    _min?: ChannelsMinOrderByAggregateInput
    _sum?: ChannelsSumOrderByAggregateInput
  }

  export type ChannelsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChannelsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChannelsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChannelsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    isPublic?: BoolWithAggregatesFilter | boolean
    password?: StringNullableWithAggregatesFilter | string | null
    ownerId?: IntWithAggregatesFilter | number
  }

  export type UsersCreateInput = {
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipCreateNestedManyWithoutUser2Input
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsCreateNestedManyWithoutMembersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsUncheckedCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsUncheckedCreateNestedManyWithoutMembersInput
  }

  export type UsersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUpdateManyWithoutUser2NestedInput
    matches?: MatchUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUpdateManyWithoutMembersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUncheckedUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUncheckedUpdateManyWithoutMembersNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
  }

  export type UsersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
  }

  export type FriendshipCreateInput = {
    status?: string
    user1: UsersCreateNestedOneWithoutFriendsInput
    user2: UsersCreateNestedOneWithoutFriendOfInput
  }

  export type FriendshipUncheckedCreateInput = {
    id?: number
    status?: string
    user1Id: number
    user2Id: number
  }

  export type FriendshipUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    user1?: UsersUpdateOneRequiredWithoutFriendsNestedInput
    user2?: UsersUpdateOneRequiredWithoutFriendOfNestedInput
  }

  export type FriendshipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    user1Id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
  }

  export type FriendshipCreateManyInput = {
    id?: number
    status?: string
    user1Id: number
    user2Id: number
  }

  export type FriendshipUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    user1Id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
  }

  export type MatchCreateInput = {
    date: Date | string
    gameType: string
    result?: string | null
    player1: UsersCreateNestedOneWithoutMatchesInput
    player2: UsersCreateNestedOneWithoutMatchesAsPlayer2Input
  }

  export type MatchUncheckedCreateInput = {
    id?: number
    date: Date | string
    gameType: string
    winnerId: number
    loserId: number
    result?: string | null
  }

  export type MatchUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    player1?: UsersUpdateOneRequiredWithoutMatchesNestedInput
    player2?: UsersUpdateOneRequiredWithoutMatchesAsPlayer2NestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: StringFieldUpdateOperationsInput | string
    winnerId?: IntFieldUpdateOperationsInput | number
    loserId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchCreateManyInput = {
    id?: number
    date: Date | string
    gameType: string
    winnerId: number
    loserId: number
    result?: string | null
  }

  export type MatchUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: StringFieldUpdateOperationsInput | string
    winnerId?: IntFieldUpdateOperationsInput | number
    loserId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChannelsCreateInput = {
    name: string
    isPublic?: boolean
    password?: string | null
    owner: UsersCreateNestedOneWithoutChannelsOwnedInput
    admins?: UsersCreateNestedManyWithoutChannelsAdminInput
    members?: UsersCreateNestedManyWithoutChannelsMemberInput
  }

  export type ChannelsUncheckedCreateInput = {
    id?: number
    name: string
    isPublic?: boolean
    password?: string | null
    ownerId: number
    admins?: UsersUncheckedCreateNestedManyWithoutChannelsAdminInput
    members?: UsersUncheckedCreateNestedManyWithoutChannelsMemberInput
  }

  export type ChannelsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UsersUpdateOneRequiredWithoutChannelsOwnedNestedInput
    admins?: UsersUpdateManyWithoutChannelsAdminNestedInput
    members?: UsersUpdateManyWithoutChannelsMemberNestedInput
  }

  export type ChannelsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    admins?: UsersUncheckedUpdateManyWithoutChannelsAdminNestedInput
    members?: UsersUncheckedUpdateManyWithoutChannelsMemberNestedInput
  }

  export type ChannelsCreateManyInput = {
    id?: number
    name: string
    isPublic?: boolean
    password?: string | null
    ownerId: number
  }

  export type ChannelsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChannelsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type FriendshipListRelationFilter = {
    every?: FriendshipWhereInput
    some?: FriendshipWhereInput
    none?: FriendshipWhereInput
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type ChannelsListRelationFilter = {
    every?: ChannelsWhereInput
    some?: ChannelsWhereInput
    none?: ChannelsWhereInput
  }

  export type FriendshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hash?: SortOrder
    username?: SortOrder
    access_token?: SortOrder
    twoFactorSecret?: SortOrder
    twofa_secret?: SortOrder
    avatar?: SortOrder
    displayName?: SortOrder
    status?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladderLevel?: SortOrder
    achievements?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladderLevel?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hash?: SortOrder
    username?: SortOrder
    access_token?: SortOrder
    twoFactorSecret?: SortOrder
    twofa_secret?: SortOrder
    avatar?: SortOrder
    displayName?: SortOrder
    status?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladderLevel?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hash?: SortOrder
    username?: SortOrder
    access_token?: SortOrder
    twoFactorSecret?: SortOrder
    twofa_secret?: SortOrder
    avatar?: SortOrder
    displayName?: SortOrder
    status?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladderLevel?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladderLevel?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type FriendshipCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
  }

  export type FriendshipAvgOrderByAggregateInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
  }

  export type FriendshipMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
  }

  export type FriendshipMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
  }

  export type FriendshipSumOrderByAggregateInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    gameType?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    result?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    id?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    gameType?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    result?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    gameType?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    result?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    id?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isPublic?: SortOrder
    password?: SortOrder
    ownerId?: SortOrder
  }

  export type ChannelsAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type ChannelsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isPublic?: SortOrder
    password?: SortOrder
    ownerId?: SortOrder
  }

  export type ChannelsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isPublic?: SortOrder
    password?: SortOrder
    ownerId?: SortOrder
  }

  export type ChannelsSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UsersCreateachievementsInput = {
    set: Enumerable<string>
  }

  export type FriendshipCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser1Input>, Enumerable<FriendshipUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser1Input>
    createMany?: FriendshipCreateManyUser1InputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type FriendshipCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser2Input>, Enumerable<FriendshipUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser2Input>
    createMany?: FriendshipCreateManyUser2InputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type MatchCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type MatchCreateNestedManyWithoutPlayer2Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer2Input>, Enumerable<MatchUncheckedCreateWithoutPlayer2Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer2Input>
    createMany?: MatchCreateManyPlayer2InputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type ChannelsCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutOwnerInput>, Enumerable<ChannelsUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutOwnerInput>
    createMany?: ChannelsCreateManyOwnerInputEnvelope
    connect?: Enumerable<ChannelsWhereUniqueInput>
  }

  export type ChannelsCreateNestedManyWithoutAdminsInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutAdminsInput>, Enumerable<ChannelsUncheckedCreateWithoutAdminsInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutAdminsInput>
    connect?: Enumerable<ChannelsWhereUniqueInput>
  }

  export type ChannelsCreateNestedManyWithoutMembersInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutMembersInput>, Enumerable<ChannelsUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutMembersInput>
    connect?: Enumerable<ChannelsWhereUniqueInput>
  }

  export type FriendshipUncheckedCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser1Input>, Enumerable<FriendshipUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser1Input>
    createMany?: FriendshipCreateManyUser1InputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type FriendshipUncheckedCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser2Input>, Enumerable<FriendshipUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser2Input>
    createMany?: FriendshipCreateManyUser2InputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type MatchUncheckedCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type MatchUncheckedCreateNestedManyWithoutPlayer2Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer2Input>, Enumerable<MatchUncheckedCreateWithoutPlayer2Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer2Input>
    createMany?: MatchCreateManyPlayer2InputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type ChannelsUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutOwnerInput>, Enumerable<ChannelsUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutOwnerInput>
    createMany?: ChannelsCreateManyOwnerInputEnvelope
    connect?: Enumerable<ChannelsWhereUniqueInput>
  }

  export type ChannelsUncheckedCreateNestedManyWithoutAdminsInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutAdminsInput>, Enumerable<ChannelsUncheckedCreateWithoutAdminsInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutAdminsInput>
    connect?: Enumerable<ChannelsWhereUniqueInput>
  }

  export type ChannelsUncheckedCreateNestedManyWithoutMembersInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutMembersInput>, Enumerable<ChannelsUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutMembersInput>
    connect?: Enumerable<ChannelsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersUpdateachievementsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type FriendshipUpdateManyWithoutUser1NestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser1Input>, Enumerable<FriendshipUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: FriendshipCreateManyUser1InputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type FriendshipUpdateManyWithoutUser2NestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser2Input>, Enumerable<FriendshipUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: FriendshipCreateManyUser2InputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type MatchUpdateManyWithoutPlayer1NestedInput = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutPlayer1Input>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutPlayer1Input>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type MatchUpdateManyWithoutPlayer2NestedInput = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer2Input>, Enumerable<MatchUncheckedCreateWithoutPlayer2Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer2Input>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutPlayer2Input>
    createMany?: MatchCreateManyPlayer2InputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutPlayer2Input>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutPlayer2Input>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type ChannelsUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutOwnerInput>, Enumerable<ChannelsUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<ChannelsUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: ChannelsCreateManyOwnerInputEnvelope
    set?: Enumerable<ChannelsWhereUniqueInput>
    disconnect?: Enumerable<ChannelsWhereUniqueInput>
    delete?: Enumerable<ChannelsWhereUniqueInput>
    connect?: Enumerable<ChannelsWhereUniqueInput>
    update?: Enumerable<ChannelsUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<ChannelsUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<ChannelsScalarWhereInput>
  }

  export type ChannelsUpdateManyWithoutAdminsNestedInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutAdminsInput>, Enumerable<ChannelsUncheckedCreateWithoutAdminsInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutAdminsInput>
    upsert?: Enumerable<ChannelsUpsertWithWhereUniqueWithoutAdminsInput>
    set?: Enumerable<ChannelsWhereUniqueInput>
    disconnect?: Enumerable<ChannelsWhereUniqueInput>
    delete?: Enumerable<ChannelsWhereUniqueInput>
    connect?: Enumerable<ChannelsWhereUniqueInput>
    update?: Enumerable<ChannelsUpdateWithWhereUniqueWithoutAdminsInput>
    updateMany?: Enumerable<ChannelsUpdateManyWithWhereWithoutAdminsInput>
    deleteMany?: Enumerable<ChannelsScalarWhereInput>
  }

  export type ChannelsUpdateManyWithoutMembersNestedInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutMembersInput>, Enumerable<ChannelsUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutMembersInput>
    upsert?: Enumerable<ChannelsUpsertWithWhereUniqueWithoutMembersInput>
    set?: Enumerable<ChannelsWhereUniqueInput>
    disconnect?: Enumerable<ChannelsWhereUniqueInput>
    delete?: Enumerable<ChannelsWhereUniqueInput>
    connect?: Enumerable<ChannelsWhereUniqueInput>
    update?: Enumerable<ChannelsUpdateWithWhereUniqueWithoutMembersInput>
    updateMany?: Enumerable<ChannelsUpdateManyWithWhereWithoutMembersInput>
    deleteMany?: Enumerable<ChannelsScalarWhereInput>
  }

  export type FriendshipUncheckedUpdateManyWithoutUser1NestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser1Input>, Enumerable<FriendshipUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: FriendshipCreateManyUser1InputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type FriendshipUncheckedUpdateManyWithoutUser2NestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser2Input>, Enumerable<FriendshipUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: FriendshipCreateManyUser2InputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type MatchUncheckedUpdateManyWithoutPlayer1NestedInput = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutPlayer1Input>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutPlayer1Input>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type MatchUncheckedUpdateManyWithoutPlayer2NestedInput = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer2Input>, Enumerable<MatchUncheckedCreateWithoutPlayer2Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer2Input>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutPlayer2Input>
    createMany?: MatchCreateManyPlayer2InputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutPlayer2Input>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutPlayer2Input>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type ChannelsUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutOwnerInput>, Enumerable<ChannelsUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<ChannelsUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: ChannelsCreateManyOwnerInputEnvelope
    set?: Enumerable<ChannelsWhereUniqueInput>
    disconnect?: Enumerable<ChannelsWhereUniqueInput>
    delete?: Enumerable<ChannelsWhereUniqueInput>
    connect?: Enumerable<ChannelsWhereUniqueInput>
    update?: Enumerable<ChannelsUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<ChannelsUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<ChannelsScalarWhereInput>
  }

  export type ChannelsUncheckedUpdateManyWithoutAdminsNestedInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutAdminsInput>, Enumerable<ChannelsUncheckedCreateWithoutAdminsInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutAdminsInput>
    upsert?: Enumerable<ChannelsUpsertWithWhereUniqueWithoutAdminsInput>
    set?: Enumerable<ChannelsWhereUniqueInput>
    disconnect?: Enumerable<ChannelsWhereUniqueInput>
    delete?: Enumerable<ChannelsWhereUniqueInput>
    connect?: Enumerable<ChannelsWhereUniqueInput>
    update?: Enumerable<ChannelsUpdateWithWhereUniqueWithoutAdminsInput>
    updateMany?: Enumerable<ChannelsUpdateManyWithWhereWithoutAdminsInput>
    deleteMany?: Enumerable<ChannelsScalarWhereInput>
  }

  export type ChannelsUncheckedUpdateManyWithoutMembersNestedInput = {
    create?: XOR<Enumerable<ChannelsCreateWithoutMembersInput>, Enumerable<ChannelsUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<ChannelsCreateOrConnectWithoutMembersInput>
    upsert?: Enumerable<ChannelsUpsertWithWhereUniqueWithoutMembersInput>
    set?: Enumerable<ChannelsWhereUniqueInput>
    disconnect?: Enumerable<ChannelsWhereUniqueInput>
    delete?: Enumerable<ChannelsWhereUniqueInput>
    connect?: Enumerable<ChannelsWhereUniqueInput>
    update?: Enumerable<ChannelsUpdateWithWhereUniqueWithoutMembersInput>
    updateMany?: Enumerable<ChannelsUpdateManyWithWhereWithoutMembersInput>
    deleteMany?: Enumerable<ChannelsScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutFriendsInput = {
    create?: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFriendsInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutFriendOfInput = {
    create?: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFriendOfInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutFriendsNestedInput = {
    create?: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFriendsInput
    upsert?: UsersUpsertWithoutFriendsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutFriendsInput, UsersUncheckedUpdateWithoutFriendsInput>
  }

  export type UsersUpdateOneRequiredWithoutFriendOfNestedInput = {
    create?: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFriendOfInput
    upsert?: UsersUpsertWithoutFriendOfInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutFriendOfInput, UsersUncheckedUpdateWithoutFriendOfInput>
  }

  export type UsersCreateNestedOneWithoutMatchesInput = {
    create?: XOR<UsersCreateWithoutMatchesInput, UsersUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMatchesInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutMatchesAsPlayer2Input = {
    create?: XOR<UsersCreateWithoutMatchesAsPlayer2Input, UsersUncheckedCreateWithoutMatchesAsPlayer2Input>
    connectOrCreate?: UsersCreateOrConnectWithoutMatchesAsPlayer2Input
    connect?: UsersWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsersUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<UsersCreateWithoutMatchesInput, UsersUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMatchesInput
    upsert?: UsersUpsertWithoutMatchesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutMatchesInput, UsersUncheckedUpdateWithoutMatchesInput>
  }

  export type UsersUpdateOneRequiredWithoutMatchesAsPlayer2NestedInput = {
    create?: XOR<UsersCreateWithoutMatchesAsPlayer2Input, UsersUncheckedCreateWithoutMatchesAsPlayer2Input>
    connectOrCreate?: UsersCreateOrConnectWithoutMatchesAsPlayer2Input
    upsert?: UsersUpsertWithoutMatchesAsPlayer2Input
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutMatchesAsPlayer2Input, UsersUncheckedUpdateWithoutMatchesAsPlayer2Input>
  }

  export type UsersCreateNestedOneWithoutChannelsOwnedInput = {
    create?: XOR<UsersCreateWithoutChannelsOwnedInput, UsersUncheckedCreateWithoutChannelsOwnedInput>
    connectOrCreate?: UsersCreateOrConnectWithoutChannelsOwnedInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedManyWithoutChannelsAdminInput = {
    create?: XOR<Enumerable<UsersCreateWithoutChannelsAdminInput>, Enumerable<UsersUncheckedCreateWithoutChannelsAdminInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutChannelsAdminInput>
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type UsersCreateNestedManyWithoutChannelsMemberInput = {
    create?: XOR<Enumerable<UsersCreateWithoutChannelsMemberInput>, Enumerable<UsersUncheckedCreateWithoutChannelsMemberInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutChannelsMemberInput>
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type UsersUncheckedCreateNestedManyWithoutChannelsAdminInput = {
    create?: XOR<Enumerable<UsersCreateWithoutChannelsAdminInput>, Enumerable<UsersUncheckedCreateWithoutChannelsAdminInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutChannelsAdminInput>
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type UsersUncheckedCreateNestedManyWithoutChannelsMemberInput = {
    create?: XOR<Enumerable<UsersCreateWithoutChannelsMemberInput>, Enumerable<UsersUncheckedCreateWithoutChannelsMemberInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutChannelsMemberInput>
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsersUpdateOneRequiredWithoutChannelsOwnedNestedInput = {
    create?: XOR<UsersCreateWithoutChannelsOwnedInput, UsersUncheckedCreateWithoutChannelsOwnedInput>
    connectOrCreate?: UsersCreateOrConnectWithoutChannelsOwnedInput
    upsert?: UsersUpsertWithoutChannelsOwnedInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutChannelsOwnedInput, UsersUncheckedUpdateWithoutChannelsOwnedInput>
  }

  export type UsersUpdateManyWithoutChannelsAdminNestedInput = {
    create?: XOR<Enumerable<UsersCreateWithoutChannelsAdminInput>, Enumerable<UsersUncheckedCreateWithoutChannelsAdminInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutChannelsAdminInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutChannelsAdminInput>
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutChannelsAdminInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutChannelsAdminInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type UsersUpdateManyWithoutChannelsMemberNestedInput = {
    create?: XOR<Enumerable<UsersCreateWithoutChannelsMemberInput>, Enumerable<UsersUncheckedCreateWithoutChannelsMemberInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutChannelsMemberInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutChannelsMemberInput>
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutChannelsMemberInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutChannelsMemberInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type UsersUncheckedUpdateManyWithoutChannelsAdminNestedInput = {
    create?: XOR<Enumerable<UsersCreateWithoutChannelsAdminInput>, Enumerable<UsersUncheckedCreateWithoutChannelsAdminInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutChannelsAdminInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutChannelsAdminInput>
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutChannelsAdminInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutChannelsAdminInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type UsersUncheckedUpdateManyWithoutChannelsMemberNestedInput = {
    create?: XOR<Enumerable<UsersCreateWithoutChannelsMemberInput>, Enumerable<UsersUncheckedCreateWithoutChannelsMemberInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutChannelsMemberInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutChannelsMemberInput>
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutChannelsMemberInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutChannelsMemberInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type FriendshipCreateWithoutUser1Input = {
    status?: string
    user2: UsersCreateNestedOneWithoutFriendOfInput
  }

  export type FriendshipUncheckedCreateWithoutUser1Input = {
    id?: number
    status?: string
    user2Id: number
  }

  export type FriendshipCreateOrConnectWithoutUser1Input = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutUser1Input, FriendshipUncheckedCreateWithoutUser1Input>
  }

  export type FriendshipCreateManyUser1InputEnvelope = {
    data: Enumerable<FriendshipCreateManyUser1Input>
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutUser2Input = {
    status?: string
    user1: UsersCreateNestedOneWithoutFriendsInput
  }

  export type FriendshipUncheckedCreateWithoutUser2Input = {
    id?: number
    status?: string
    user1Id: number
  }

  export type FriendshipCreateOrConnectWithoutUser2Input = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutUser2Input, FriendshipUncheckedCreateWithoutUser2Input>
  }

  export type FriendshipCreateManyUser2InputEnvelope = {
    data: Enumerable<FriendshipCreateManyUser2Input>
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutPlayer1Input = {
    date: Date | string
    gameType: string
    result?: string | null
    player2: UsersCreateNestedOneWithoutMatchesAsPlayer2Input
  }

  export type MatchUncheckedCreateWithoutPlayer1Input = {
    id?: number
    date: Date | string
    gameType: string
    loserId: number
    result?: string | null
  }

  export type MatchCreateOrConnectWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input>
  }

  export type MatchCreateManyPlayer1InputEnvelope = {
    data: Enumerable<MatchCreateManyPlayer1Input>
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutPlayer2Input = {
    date: Date | string
    gameType: string
    result?: string | null
    player1: UsersCreateNestedOneWithoutMatchesInput
  }

  export type MatchUncheckedCreateWithoutPlayer2Input = {
    id?: number
    date: Date | string
    gameType: string
    winnerId: number
    result?: string | null
  }

  export type MatchCreateOrConnectWithoutPlayer2Input = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutPlayer2Input, MatchUncheckedCreateWithoutPlayer2Input>
  }

  export type MatchCreateManyPlayer2InputEnvelope = {
    data: Enumerable<MatchCreateManyPlayer2Input>
    skipDuplicates?: boolean
  }

  export type ChannelsCreateWithoutOwnerInput = {
    name: string
    isPublic?: boolean
    password?: string | null
    admins?: UsersCreateNestedManyWithoutChannelsAdminInput
    members?: UsersCreateNestedManyWithoutChannelsMemberInput
  }

  export type ChannelsUncheckedCreateWithoutOwnerInput = {
    id?: number
    name: string
    isPublic?: boolean
    password?: string | null
    admins?: UsersUncheckedCreateNestedManyWithoutChannelsAdminInput
    members?: UsersUncheckedCreateNestedManyWithoutChannelsMemberInput
  }

  export type ChannelsCreateOrConnectWithoutOwnerInput = {
    where: ChannelsWhereUniqueInput
    create: XOR<ChannelsCreateWithoutOwnerInput, ChannelsUncheckedCreateWithoutOwnerInput>
  }

  export type ChannelsCreateManyOwnerInputEnvelope = {
    data: Enumerable<ChannelsCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type ChannelsCreateWithoutAdminsInput = {
    name: string
    isPublic?: boolean
    password?: string | null
    owner: UsersCreateNestedOneWithoutChannelsOwnedInput
    members?: UsersCreateNestedManyWithoutChannelsMemberInput
  }

  export type ChannelsUncheckedCreateWithoutAdminsInput = {
    id?: number
    name: string
    isPublic?: boolean
    password?: string | null
    ownerId: number
    members?: UsersUncheckedCreateNestedManyWithoutChannelsMemberInput
  }

  export type ChannelsCreateOrConnectWithoutAdminsInput = {
    where: ChannelsWhereUniqueInput
    create: XOR<ChannelsCreateWithoutAdminsInput, ChannelsUncheckedCreateWithoutAdminsInput>
  }

  export type ChannelsCreateWithoutMembersInput = {
    name: string
    isPublic?: boolean
    password?: string | null
    owner: UsersCreateNestedOneWithoutChannelsOwnedInput
    admins?: UsersCreateNestedManyWithoutChannelsAdminInput
  }

  export type ChannelsUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    isPublic?: boolean
    password?: string | null
    ownerId: number
    admins?: UsersUncheckedCreateNestedManyWithoutChannelsAdminInput
  }

  export type ChannelsCreateOrConnectWithoutMembersInput = {
    where: ChannelsWhereUniqueInput
    create: XOR<ChannelsCreateWithoutMembersInput, ChannelsUncheckedCreateWithoutMembersInput>
  }

  export type FriendshipUpsertWithWhereUniqueWithoutUser1Input = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutUser1Input, FriendshipUncheckedUpdateWithoutUser1Input>
    create: XOR<FriendshipCreateWithoutUser1Input, FriendshipUncheckedCreateWithoutUser1Input>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutUser1Input = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutUser1Input, FriendshipUncheckedUpdateWithoutUser1Input>
  }

  export type FriendshipUpdateManyWithWhereWithoutUser1Input = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutFriendsInput>
  }

  export type FriendshipScalarWhereInput = {
    AND?: Enumerable<FriendshipScalarWhereInput>
    OR?: Enumerable<FriendshipScalarWhereInput>
    NOT?: Enumerable<FriendshipScalarWhereInput>
    id?: IntFilter | number
    status?: StringFilter | string
    user1Id?: IntFilter | number
    user2Id?: IntFilter | number
  }

  export type FriendshipUpsertWithWhereUniqueWithoutUser2Input = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutUser2Input, FriendshipUncheckedUpdateWithoutUser2Input>
    create: XOR<FriendshipCreateWithoutUser2Input, FriendshipUncheckedCreateWithoutUser2Input>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutUser2Input = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutUser2Input, FriendshipUncheckedUpdateWithoutUser2Input>
  }

  export type FriendshipUpdateManyWithWhereWithoutUser2Input = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutFriendOfInput>
  }

  export type MatchUpsertWithWhereUniqueWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutPlayer1Input, MatchUncheckedUpdateWithoutPlayer1Input>
    create: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input>
  }

  export type MatchUpdateWithWhereUniqueWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutPlayer1Input, MatchUncheckedUpdateWithoutPlayer1Input>
  }

  export type MatchUpdateManyWithWhereWithoutPlayer1Input = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutMatchesInput>
  }

  export type MatchScalarWhereInput = {
    AND?: Enumerable<MatchScalarWhereInput>
    OR?: Enumerable<MatchScalarWhereInput>
    NOT?: Enumerable<MatchScalarWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    gameType?: StringFilter | string
    winnerId?: IntFilter | number
    loserId?: IntFilter | number
    result?: StringNullableFilter | string | null
  }

  export type MatchUpsertWithWhereUniqueWithoutPlayer2Input = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutPlayer2Input, MatchUncheckedUpdateWithoutPlayer2Input>
    create: XOR<MatchCreateWithoutPlayer2Input, MatchUncheckedCreateWithoutPlayer2Input>
  }

  export type MatchUpdateWithWhereUniqueWithoutPlayer2Input = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutPlayer2Input, MatchUncheckedUpdateWithoutPlayer2Input>
  }

  export type MatchUpdateManyWithWhereWithoutPlayer2Input = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutMatchesAsPlayer2Input>
  }

  export type ChannelsUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ChannelsWhereUniqueInput
    update: XOR<ChannelsUpdateWithoutOwnerInput, ChannelsUncheckedUpdateWithoutOwnerInput>
    create: XOR<ChannelsCreateWithoutOwnerInput, ChannelsUncheckedCreateWithoutOwnerInput>
  }

  export type ChannelsUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ChannelsWhereUniqueInput
    data: XOR<ChannelsUpdateWithoutOwnerInput, ChannelsUncheckedUpdateWithoutOwnerInput>
  }

  export type ChannelsUpdateManyWithWhereWithoutOwnerInput = {
    where: ChannelsScalarWhereInput
    data: XOR<ChannelsUpdateManyMutationInput, ChannelsUncheckedUpdateManyWithoutChannelsOwnedInput>
  }

  export type ChannelsScalarWhereInput = {
    AND?: Enumerable<ChannelsScalarWhereInput>
    OR?: Enumerable<ChannelsScalarWhereInput>
    NOT?: Enumerable<ChannelsScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    isPublic?: BoolFilter | boolean
    password?: StringNullableFilter | string | null
    ownerId?: IntFilter | number
  }

  export type ChannelsUpsertWithWhereUniqueWithoutAdminsInput = {
    where: ChannelsWhereUniqueInput
    update: XOR<ChannelsUpdateWithoutAdminsInput, ChannelsUncheckedUpdateWithoutAdminsInput>
    create: XOR<ChannelsCreateWithoutAdminsInput, ChannelsUncheckedCreateWithoutAdminsInput>
  }

  export type ChannelsUpdateWithWhereUniqueWithoutAdminsInput = {
    where: ChannelsWhereUniqueInput
    data: XOR<ChannelsUpdateWithoutAdminsInput, ChannelsUncheckedUpdateWithoutAdminsInput>
  }

  export type ChannelsUpdateManyWithWhereWithoutAdminsInput = {
    where: ChannelsScalarWhereInput
    data: XOR<ChannelsUpdateManyMutationInput, ChannelsUncheckedUpdateManyWithoutChannelsAdminInput>
  }

  export type ChannelsUpsertWithWhereUniqueWithoutMembersInput = {
    where: ChannelsWhereUniqueInput
    update: XOR<ChannelsUpdateWithoutMembersInput, ChannelsUncheckedUpdateWithoutMembersInput>
    create: XOR<ChannelsCreateWithoutMembersInput, ChannelsUncheckedCreateWithoutMembersInput>
  }

  export type ChannelsUpdateWithWhereUniqueWithoutMembersInput = {
    where: ChannelsWhereUniqueInput
    data: XOR<ChannelsUpdateWithoutMembersInput, ChannelsUncheckedUpdateWithoutMembersInput>
  }

  export type ChannelsUpdateManyWithWhereWithoutMembersInput = {
    where: ChannelsScalarWhereInput
    data: XOR<ChannelsUpdateManyMutationInput, ChannelsUncheckedUpdateManyWithoutChannelsMemberInput>
  }

  export type UsersCreateWithoutFriendsInput = {
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friendOf?: FriendshipCreateNestedManyWithoutUser2Input
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsCreateNestedManyWithoutMembersInput
  }

  export type UsersUncheckedCreateWithoutFriendsInput = {
    id?: number
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friendOf?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsUncheckedCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsUncheckedCreateNestedManyWithoutMembersInput
  }

  export type UsersCreateOrConnectWithoutFriendsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput>
  }

  export type UsersCreateWithoutFriendOfInput = {
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipCreateNestedManyWithoutUser1Input
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsCreateNestedManyWithoutMembersInput
  }

  export type UsersUncheckedCreateWithoutFriendOfInput = {
    id?: number
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsUncheckedCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsUncheckedCreateNestedManyWithoutMembersInput
  }

  export type UsersCreateOrConnectWithoutFriendOfInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput>
  }

  export type UsersUpsertWithoutFriendsInput = {
    update: XOR<UsersUpdateWithoutFriendsInput, UsersUncheckedUpdateWithoutFriendsInput>
    create: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput>
  }

  export type UsersUpdateWithoutFriendsInput = {
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friendOf?: FriendshipUpdateManyWithoutUser2NestedInput
    matches?: MatchUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUpdateManyWithoutMembersNestedInput
  }

  export type UsersUncheckedUpdateWithoutFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friendOf?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUncheckedUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUncheckedUpdateManyWithoutMembersNestedInput
  }

  export type UsersUpsertWithoutFriendOfInput = {
    update: XOR<UsersUpdateWithoutFriendOfInput, UsersUncheckedUpdateWithoutFriendOfInput>
    create: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput>
  }

  export type UsersUpdateWithoutFriendOfInput = {
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUpdateManyWithoutUser1NestedInput
    matches?: MatchUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUpdateManyWithoutMembersNestedInput
  }

  export type UsersUncheckedUpdateWithoutFriendOfInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUncheckedUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUncheckedUpdateManyWithoutMembersNestedInput
  }

  export type UsersCreateWithoutMatchesInput = {
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipCreateNestedManyWithoutUser2Input
    matchesAsPlayer2?: MatchCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsCreateNestedManyWithoutMembersInput
  }

  export type UsersUncheckedCreateWithoutMatchesInput = {
    id?: number
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    matchesAsPlayer2?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsUncheckedCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsUncheckedCreateNestedManyWithoutMembersInput
  }

  export type UsersCreateOrConnectWithoutMatchesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMatchesInput, UsersUncheckedCreateWithoutMatchesInput>
  }

  export type UsersCreateWithoutMatchesAsPlayer2Input = {
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipCreateNestedManyWithoutUser2Input
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    channelsOwned?: ChannelsCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsCreateNestedManyWithoutMembersInput
  }

  export type UsersUncheckedCreateWithoutMatchesAsPlayer2Input = {
    id?: number
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    channelsOwned?: ChannelsUncheckedCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsUncheckedCreateNestedManyWithoutMembersInput
  }

  export type UsersCreateOrConnectWithoutMatchesAsPlayer2Input = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMatchesAsPlayer2Input, UsersUncheckedCreateWithoutMatchesAsPlayer2Input>
  }

  export type UsersUpsertWithoutMatchesInput = {
    update: XOR<UsersUpdateWithoutMatchesInput, UsersUncheckedUpdateWithoutMatchesInput>
    create: XOR<UsersCreateWithoutMatchesInput, UsersUncheckedCreateWithoutMatchesInput>
  }

  export type UsersUpdateWithoutMatchesInput = {
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUpdateManyWithoutUser2NestedInput
    matchesAsPlayer2?: MatchUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUpdateManyWithoutMembersNestedInput
  }

  export type UsersUncheckedUpdateWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    matchesAsPlayer2?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUncheckedUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUncheckedUpdateManyWithoutMembersNestedInput
  }

  export type UsersUpsertWithoutMatchesAsPlayer2Input = {
    update: XOR<UsersUpdateWithoutMatchesAsPlayer2Input, UsersUncheckedUpdateWithoutMatchesAsPlayer2Input>
    create: XOR<UsersCreateWithoutMatchesAsPlayer2Input, UsersUncheckedCreateWithoutMatchesAsPlayer2Input>
  }

  export type UsersUpdateWithoutMatchesAsPlayer2Input = {
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUpdateManyWithoutUser2NestedInput
    matches?: MatchUpdateManyWithoutPlayer1NestedInput
    channelsOwned?: ChannelsUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUpdateManyWithoutMembersNestedInput
  }

  export type UsersUncheckedUpdateWithoutMatchesAsPlayer2Input = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    channelsOwned?: ChannelsUncheckedUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUncheckedUpdateManyWithoutMembersNestedInput
  }

  export type UsersCreateWithoutChannelsOwnedInput = {
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipCreateNestedManyWithoutUser2Input
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchCreateNestedManyWithoutPlayer2Input
    channelsAdmin?: ChannelsCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsCreateNestedManyWithoutMembersInput
  }

  export type UsersUncheckedCreateWithoutChannelsOwnedInput = {
    id?: number
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    channelsAdmin?: ChannelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: ChannelsUncheckedCreateNestedManyWithoutMembersInput
  }

  export type UsersCreateOrConnectWithoutChannelsOwnedInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutChannelsOwnedInput, UsersUncheckedCreateWithoutChannelsOwnedInput>
  }

  export type UsersCreateWithoutChannelsAdminInput = {
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipCreateNestedManyWithoutUser2Input
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsCreateNestedManyWithoutOwnerInput
    channelsMember?: ChannelsCreateNestedManyWithoutMembersInput
  }

  export type UsersUncheckedCreateWithoutChannelsAdminInput = {
    id?: number
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsUncheckedCreateNestedManyWithoutOwnerInput
    channelsMember?: ChannelsUncheckedCreateNestedManyWithoutMembersInput
  }

  export type UsersCreateOrConnectWithoutChannelsAdminInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutChannelsAdminInput, UsersUncheckedCreateWithoutChannelsAdminInput>
  }

  export type UsersCreateWithoutChannelsMemberInput = {
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipCreateNestedManyWithoutUser2Input
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsCreateNestedManyWithoutAdminsInput
  }

  export type UsersUncheckedCreateWithoutChannelsMemberInput = {
    id?: number
    email: string
    hash: string
    username: string
    access_token: string
    twoFactorSecret?: boolean | null
    twofa_secret?: string | null
    avatar?: string | null
    displayName: string
    status?: string | null
    wins?: number
    losses?: number
    ladderLevel?: number
    achievements?: UsersCreateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friendOf?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    matchesAsPlayer2?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    channelsOwned?: ChannelsUncheckedCreateNestedManyWithoutOwnerInput
    channelsAdmin?: ChannelsUncheckedCreateNestedManyWithoutAdminsInput
  }

  export type UsersCreateOrConnectWithoutChannelsMemberInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutChannelsMemberInput, UsersUncheckedCreateWithoutChannelsMemberInput>
  }

  export type UsersUpsertWithoutChannelsOwnedInput = {
    update: XOR<UsersUpdateWithoutChannelsOwnedInput, UsersUncheckedUpdateWithoutChannelsOwnedInput>
    create: XOR<UsersCreateWithoutChannelsOwnedInput, UsersUncheckedCreateWithoutChannelsOwnedInput>
  }

  export type UsersUpdateWithoutChannelsOwnedInput = {
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUpdateManyWithoutUser2NestedInput
    matches?: MatchUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUpdateManyWithoutPlayer2NestedInput
    channelsAdmin?: ChannelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUpdateManyWithoutMembersNestedInput
  }

  export type UsersUncheckedUpdateWithoutChannelsOwnedInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    channelsAdmin?: ChannelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: ChannelsUncheckedUpdateManyWithoutMembersNestedInput
  }

  export type UsersUpsertWithWhereUniqueWithoutChannelsAdminInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutChannelsAdminInput, UsersUncheckedUpdateWithoutChannelsAdminInput>
    create: XOR<UsersCreateWithoutChannelsAdminInput, UsersUncheckedCreateWithoutChannelsAdminInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutChannelsAdminInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutChannelsAdminInput, UsersUncheckedUpdateWithoutChannelsAdminInput>
  }

  export type UsersUpdateManyWithWhereWithoutChannelsAdminInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutAdminsInput>
  }

  export type UsersScalarWhereInput = {
    AND?: Enumerable<UsersScalarWhereInput>
    OR?: Enumerable<UsersScalarWhereInput>
    NOT?: Enumerable<UsersScalarWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    hash?: StringFilter | string
    username?: StringFilter | string
    access_token?: StringFilter | string
    twoFactorSecret?: BoolNullableFilter | boolean | null
    twofa_secret?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    displayName?: StringFilter | string
    status?: StringNullableFilter | string | null
    wins?: IntFilter | number
    losses?: IntFilter | number
    ladderLevel?: IntFilter | number
    achievements?: StringNullableListFilter
  }

  export type UsersUpsertWithWhereUniqueWithoutChannelsMemberInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutChannelsMemberInput, UsersUncheckedUpdateWithoutChannelsMemberInput>
    create: XOR<UsersCreateWithoutChannelsMemberInput, UsersUncheckedCreateWithoutChannelsMemberInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutChannelsMemberInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutChannelsMemberInput, UsersUncheckedUpdateWithoutChannelsMemberInput>
  }

  export type UsersUpdateManyWithWhereWithoutChannelsMemberInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutMembersInput>
  }

  export type FriendshipCreateManyUser1Input = {
    id?: number
    status?: string
    user2Id: number
  }

  export type FriendshipCreateManyUser2Input = {
    id?: number
    status?: string
    user1Id: number
  }

  export type MatchCreateManyPlayer1Input = {
    id?: number
    date: Date | string
    gameType: string
    loserId: number
    result?: string | null
  }

  export type MatchCreateManyPlayer2Input = {
    id?: number
    date: Date | string
    gameType: string
    winnerId: number
    result?: string | null
  }

  export type ChannelsCreateManyOwnerInput = {
    id?: number
    name: string
    isPublic?: boolean
    password?: string | null
  }

  export type FriendshipUpdateWithoutUser1Input = {
    status?: StringFieldUpdateOperationsInput | string
    user2?: UsersUpdateOneRequiredWithoutFriendOfNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutUser1Input = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    user2Id?: IntFieldUpdateOperationsInput | number
  }

  export type FriendshipUncheckedUpdateManyWithoutFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    user2Id?: IntFieldUpdateOperationsInput | number
  }

  export type FriendshipUpdateWithoutUser2Input = {
    status?: StringFieldUpdateOperationsInput | string
    user1?: UsersUpdateOneRequiredWithoutFriendsNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutUser2Input = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    user1Id?: IntFieldUpdateOperationsInput | number
  }

  export type FriendshipUncheckedUpdateManyWithoutFriendOfInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    user1Id?: IntFieldUpdateOperationsInput | number
  }

  export type MatchUpdateWithoutPlayer1Input = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    player2?: UsersUpdateOneRequiredWithoutMatchesAsPlayer2NestedInput
  }

  export type MatchUncheckedUpdateWithoutPlayer1Input = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: StringFieldUpdateOperationsInput | string
    loserId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUncheckedUpdateManyWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: StringFieldUpdateOperationsInput | string
    loserId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUpdateWithoutPlayer2Input = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    player1?: UsersUpdateOneRequiredWithoutMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutPlayer2Input = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: StringFieldUpdateOperationsInput | string
    winnerId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUncheckedUpdateManyWithoutMatchesAsPlayer2Input = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: StringFieldUpdateOperationsInput | string
    winnerId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChannelsUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    admins?: UsersUpdateManyWithoutChannelsAdminNestedInput
    members?: UsersUpdateManyWithoutChannelsMemberNestedInput
  }

  export type ChannelsUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    admins?: UsersUncheckedUpdateManyWithoutChannelsAdminNestedInput
    members?: UsersUncheckedUpdateManyWithoutChannelsMemberNestedInput
  }

  export type ChannelsUncheckedUpdateManyWithoutChannelsOwnedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChannelsUpdateWithoutAdminsInput = {
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UsersUpdateOneRequiredWithoutChannelsOwnedNestedInput
    members?: UsersUpdateManyWithoutChannelsMemberNestedInput
  }

  export type ChannelsUncheckedUpdateWithoutAdminsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    members?: UsersUncheckedUpdateManyWithoutChannelsMemberNestedInput
  }

  export type ChannelsUncheckedUpdateManyWithoutChannelsAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelsUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UsersUpdateOneRequiredWithoutChannelsOwnedNestedInput
    admins?: UsersUpdateManyWithoutChannelsAdminNestedInput
  }

  export type ChannelsUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    admins?: UsersUncheckedUpdateManyWithoutChannelsAdminNestedInput
  }

  export type ChannelsUncheckedUpdateManyWithoutChannelsMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type UsersUpdateWithoutChannelsAdminInput = {
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUpdateManyWithoutUser2NestedInput
    matches?: MatchUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUpdateManyWithoutOwnerNestedInput
    channelsMember?: ChannelsUpdateManyWithoutMembersNestedInput
  }

  export type UsersUncheckedUpdateWithoutChannelsAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUncheckedUpdateManyWithoutOwnerNestedInput
    channelsMember?: ChannelsUncheckedUpdateManyWithoutMembersNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutAdminsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
  }

  export type UsersUpdateWithoutChannelsMemberInput = {
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUpdateManyWithoutUser2NestedInput
    matches?: MatchUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUpdateManyWithoutAdminsNestedInput
  }

  export type UsersUncheckedUpdateWithoutChannelsMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
    friends?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friendOf?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    matchesAsPlayer2?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    channelsOwned?: ChannelsUncheckedUpdateManyWithoutOwnerNestedInput
    channelsAdmin?: ChannelsUncheckedUpdateManyWithoutAdminsNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    twoFactorSecret?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twofa_secret?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladderLevel?: IntFieldUpdateOperationsInput | number
    achievements?: UsersUpdateachievementsInput | Enumerable<string>
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}